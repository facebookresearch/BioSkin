# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


import torch
from scipy.interpolate import interp1d
import os
os.environ['OPENCV_IO_ENABLE_OPENEXR'] = 'true'
import cv2
import numpy as np


def gammaCorrection(src, gamma):
    invGamma = 1 / gamma

    table = [((i / 255) ** invGamma) * 255 for i in range(256)]
    table = np.array(table, np.uint8)

    return cv2.LUT(src, table)


def resample(x, factor, kind='linear'):
    n = np.ceil(x.size / factor)
    f = interp1d(np.linspace(0, 1, x.size), x, kind)
    return f(np.linspace(0, 1, int(n)))


def sRGB_to_linear(non_linear):
    if non_linear.any() <= 0.04045:
        linear = non_linear / 12.92
    else:
        linear = ((non_linear + 0.055) / 1.055) ** 2.4
    return linear


def linear_to_sRGB(linear):
    if linear.any() <= 0.0031308:
        non_linear = linear * 12.92
    else:
        non_linear = 1.055 * linear ** (1.0 / 2.4) - 0.055
    return non_linear


def hue_angle(colors, format="abL"):
    # h = arctan (b/a)
    if format == "abL":
        hue_angle = (np.arctan(colors[:, 1] / colors[:, 0]) * 180) / np.pi
    elif format == "Lab":
        hue_angle = (np.arctan(colors[:, 2] / colors[:, 1]) * 180) / np.pi
    return hue_angle


def individual_topology_angle(colors, format="abL"):
    # ITA = [arctan(L*-50)/b*)] *180/p
    if format == "abL":
        ITA = (np.arctan((colors[:, 2] - 50) / colors[:, 1]) * 180) / np.pi
    elif format == "Lab":
        ITA = (np.arctan((colors[:, 0] - 50) / colors[:, 2]) * 180) / np.pi
    return ITA


# cie1931-xyzbar-380+5+780
def create_xyz(size=80):
    x = np.array([
    0.001368000055663288,
    0.002236000029370189,
    0.004242999944835901,
    0.007650000043213367,
    0.014310000464320183,
    0.023189999163150787,
    0.043510001152753830,
    0.077629998326301575,
    0.134379997849464417,
    0.214770004153251648,
    0.283899992704391479,
    0.328500002622604370,
    0.348280012607574463,
    0.348060011863708496,
    0.336199998855590820,
    0.318699985742568970,
    0.290800005197525024,
    0.251100003719329834,
    0.195360004901885986,
    0.142100006341934204,
    0.095640003681182861,
    0.057950001209974289,
    0.032010000199079514,
    0.014700000174343586,
    0.004900000058114529,
    0.002400000113993883,
    0.009300000034272671,
    0.029100000858306885,
    0.063270002603530884,
    0.109600000083446503,
    0.165500000119209290,
    0.225749999284744263,
    0.290399998426437378,
    0.359699994325637817,
    0.433450013399124146,
    0.512049973011016846,
    0.594500005245208740,
    0.678399980068206787,
    0.762099981307983398,
    0.842499971389770508,
    0.916299998760223389,
    0.978600025177001953,
    1.026299953460693359,
    1.056699991226196289,
    1.062199950218200684,
    1.045600056648254395,
    1.002599954605102539,
    0.938399970531463623,
    0.854449987411499023,
    0.751399993896484375,
    0.642400026321411133,
    0.541899979114532471,
    0.447899997234344482,
    0.360799998044967651,
    0.283499985933303833,
    0.218700006604194641,
    0.164900004863739014,
    0.121200002729892731,
    0.087399996817111969,
    0.063600003719329834,
    0.046769998967647552,
    0.032900001853704453,
    0.022700000554323196,
    0.015839999541640282,
    0.011358999647200108,
    0.008111000061035156,
    0.005789999850094318,
    0.004108999855816364,
    0.002898999955505133,
    0.002049000002443790,
    0.001440000021830201,
    0.001000000047497451,
    0.000690000015310943,
    0.000475999986520037,
    0.000331999995978549,
    0.000234999999520369,
    0.000165999997989275,
    0.000117000003228895,
    0.000082999998994637,
    0.000059000001783716])

    y = np.array([
    0.000038999998650979,
    0.000063999999838416,
    0.000119999996968545,
    0.000216999993426725,
    0.000395999988541007,
    0.000639999983832240,
    0.001210000016726553,
    0.002180000068619847,
    0.004000000189989805,
    0.007300000172108412,
    0.011599999852478504,
    0.016839999705553055,
    0.023000000044703484,
    0.029799999669194221,
    0.037999998778104782,
    0.048000000417232513,
    0.059999998658895493,
    0.073899999260902405,
    0.090980000793933868,
    0.112599998712539673,
    0.139019995927810669,
    0.169300004839897156,
    0.208020001649856567,
    0.258599996566772461,
    0.323000013828277588,
    0.407299995422363281,
    0.503000020980834961,
    0.608200013637542725,
    0.709999978542327881,
    0.793200016021728516,
    0.861999988555908203,
    0.914849996566772461,
    0.953999996185302734,
    0.980300009250640869,
    0.994949996471405029,
    1.000000000000000000,
    0.995000004768371582,
    0.978600025177001953,
    0.952000021934509277,
    0.915400028228759766,
    0.870000004768371582,
    0.816299974918365479,
    0.757000029087066650,
    0.694899976253509521,
    0.630999982357025146,
    0.566799998283386230,
    0.503000020980834961,
    0.441199988126754761,
    0.381000012159347534,
    0.321000009775161743,
    0.264999985694885254,
    0.216999992728233337,
    0.174999997019767761,
    0.138199999928474426,
    0.107000000774860382,
    0.081600002944469452,
    0.061000000685453415,
    0.044580001384019852,
    0.032000001519918442,
    0.023199999704957008,
    0.017000000923871994,
    0.011920000426471233,
    0.008209999650716782,
    0.005723000038415194,
    0.004102000035345554,
    0.002928999951109290,
    0.002091000089421868,
    0.001484000007621944,
    0.001047000056132674,
    0.000739999988581985,
    0.000520000001415610,
    0.000361000013072044,
    0.000249000004259869,
    0.000172000000020489,
    0.000119999996968545,
    0.000084999999671709,
    0.000059999998484273,
    0.000041999999666587,
    0.000029999999242136,
    0.000020999999833293])

    z = np.array([
    0.006450000219047070,
    0.010549999773502350,
    0.020050000399351120,
    0.036210000514984131,
    0.067850001156330109,
    0.110200002789497375,
    0.207399994134902954,
    0.371300011873245239,
    0.645600020885467529,
    1.039049983024597168,
    1.385599970817565918,
    1.622959971427917480,
    1.747059941291809082,
    1.782600045204162598,
    1.772109985351562500,
    1.744099974632263184,
    1.669199943542480469,
    1.528100013732910156,
    1.287639975547790527,
    1.041900038719177246,
    0.812950015068054199,
    0.616199970245361328,
    0.465180009603500366,
    0.353300005197525024,
    0.272000014781951904,
    0.212300002574920654,
    0.158199995756149292,
    0.111699998378753662,
    0.078249998390674591,
    0.057250000536441803,
    0.042160000652074814,
    0.029839999973773956,
    0.020300000905990601,
    0.013399999588727951,
    0.008750000037252903,
    0.005750000011175871,
    0.003899999894201756,
    0.002749999985098839,
    0.002099999925121665,
    0.001799999969080091,
    0.001649999991059303,
    0.001399999950081110,
    0.001099999994039536,
    0.001000000047497451,
    0.000799999979790300,
    0.000600000028498471,
    0.000339999998686835,
    0.000239999993937090,
    0.000190000006114133,
    0.000099999997473788,
    0.000049999998736894,
    0.000029999999242136,
    0.000019999999494758,
    0.000009999999747379,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000,
    0.000000000000000000])

    if size != 80:
        x = resample(x, factor=80/size, kind='linear')
        y = resample(y, factor=80/size, kind='linear')
        z = resample(z, factor=80/size, kind='linear')

    xbar = torch.tensor(x, dtype=torch.float32)
    ybar = torch.tensor(y, dtype=torch.float32)
    zbar = torch.tensor(z, dtype=torch.float32)
    return xbar, ybar, zbar


def create_matrix_xyz_to_lrgb(illuminant="D65"):
    if illuminant == "D65":
        matrix_xyz_to_lrgb = torch.tensor(np.array([[12.420749767575597, -3.7146545623403702, 0.21326517187700963],
                                                    [-5.8918942422391520, 7.1897002408297634, -0.78197265064351096],
                                                    [-1.9108846122515208, 0.15926100824153880, 4.0520420060904261]]),
                                          dtype=torch.float64)
    elif illuminant == "A":
        matrix_xyz_to_lrgb = torch.tensor(np.array([[6.52738380, -4.36067915, 0.886276484],
                                                    [-3.09632301, 8.44007778, -3.24968147],
                                                    [-1.00421298, 0.186958522, 16.8392677]]),
                                          dtype=torch.float64)
    elif illuminant == "D50":
        matrix_xyz_to_lrgb = torch.tensor(np.array([[10.6244469, -3.83000875, 0.297157109],
                                                    [-5.03980160, 7.41296816, -1.08957672],
                                                    [-1.63453043, 0.164206684, 5.64599085]]),
                                          dtype=torch.float64)
    elif illuminant == "D55":
        matrix_xyz_to_lrgb = torch.tensor(np.array([[11.3105907, -3.78442931, 0.260428548],
                                                    [-5.36528015, 7.32474852, -0.954905093],
                                                    [-1.74009097, 0.162252530, 4.94814682]]),
                                          dtype=torch.float64)
    elif illuminant == "D65prime":
        matrix_xyz_to_lrgb = torch.tensor(np.array([[15.4601755, -4.40688610, 0.234819293],
                                                    [-7.33367300, 8.52951145, -0.861004531],
                                                    [-2.37848878, 0.188939616, 4.46157074]]),
                                          dtype=torch.float64)
    matrix_xyz_to_lrgb = torch.transpose(matrix_xyz_to_lrgb, 0, 1)
    return matrix_xyz_to_lrgb


class ColorSpectrum:
    def __init__(self, device, spectrum_size):
        self.device = device
        self.xbar, self.ybar, self.zbar = create_xyz(spectrum_size)
        self.matrix_xyz_to_lrgb = create_matrix_xyz_to_lrgb()

        self.xbar = self.xbar.to(device)
        self.ybar = self.ybar.to(device)
        self.zbar = self.zbar.to(device)
        self.matrix_xyz_to_lrgb = self.matrix_xyz_to_lrgb.to(device)

    def spectrum_to_rgb(self, spectrums):
        x = self.xbar.repeat((spectrums.shape[0], 1))
        y = self.ybar.repeat((spectrums.shape[0], 1))
        z = self.zbar.repeat((spectrums.shape[0], 1))
        x = torch.sum(x * spectrums, 1) / spectrums.shape[1]
        y = torch.sum(y * spectrums, 1) / spectrums.shape[1]
        z = torch.sum(z * spectrums, 1) / spectrums.shape[1]
        r = self.matrix_xyz_to_lrgb[0, 0] * x + self.matrix_xyz_to_lrgb[0, 1] * y + self.matrix_xyz_to_lrgb[0, 2] * z
        g = self.matrix_xyz_to_lrgb[1, 0] * x + self.matrix_xyz_to_lrgb[1, 1] * y + self.matrix_xyz_to_lrgb[1, 2] * z
        b = self.matrix_xyz_to_lrgb[2, 0] * x + self.matrix_xyz_to_lrgb[2, 1] * y + self.matrix_xyz_to_lrgb[2, 2] * z
        rgb = torch.tensor(np.zeros((spectrums.shape[0], 3)), device=self.device)
        rgb[:, 0] = b
        rgb[:, 1] = g
        rgb[:, 2] = r
        return rgb

    def spectrum_to_infrared(self, spectrums):
        ir_tensor = torch.sum(spectrums, 1)
        ir_tensor /= spectrums.shape[1]
        return ir_tensor
